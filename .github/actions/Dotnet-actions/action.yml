name: Reusable Dotnet Workflow

inputs:
  command:
    required: true
    type: string
  projects:
    required: true
    type: string
  arguments:
    required: false
    type: string
  restoreArguments:
    required: false
    type: string
  nugetConfigPath:
    required: false
    type: string
  noCache:
    required: false
    type: boolean
  restoreDirectory:
    required: false
    type: string

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.201'

    - name: Run dotnet command
      shell: pwsh
      run: |
        $command = '${{ inputs.command }}'
        $projects = '${{ inputs.projects }}'
        $arguments = '${{ inputs.arguments }}'

        # Validate the 'projects' input
        if (-not $projects -or $projects.Trim() -eq '') {
          throw "The 'projects' input is required and cannot be empty."
        }

        # Handle different commands
        switch ($command) {
          "restore" {
            $restoreCommand = "dotnet restore `"$projects`""

            # Append --configfile only if nugetConfigPath is provided and not empty
            if ('${{ inputs.nugetConfigPath }}' -and '${{ inputs.nugetConfigPath }}'.Trim() -ne '') {
              $restoreCommand += " --configfile `"$(${inputs.nugetConfigPath})`""
            }

            # Append --no-cache if noCache is true
            if ('${{ inputs.noCache }}' -eq 'true') {
              $restoreCommand += " --no-cache"
            }

            # Append --packages only if restoreDirectory is provided and not empty
            if ('${{ inputs.restoreDirectory }}' -and '${{ inputs.restoreDirectory }}'.Trim() -ne '') {
              $restoreCommand += " --packages `"$(${inputs.restoreDirectory})`""
            }

            # Append additional restore arguments if provided
            if ('${{ inputs.restoreArguments }}' -and '${{ inputs.restoreArguments }}'.Trim() -ne '') {
              $restoreCommand += " $(${inputs.restoreArguments})"
            }

            Write-Host "Executing: $restoreCommand"
            Invoke-Expression $restoreCommand
          }
          "build" {
            $buildCommand = "dotnet build `"$projects`""
            if ($arguments) { $buildCommand += " $arguments" }
            Write-Host "Executing: $buildCommand"
            Invoke-Expression $buildCommand
          }
          "test" {
            $testCommand = "dotnet test `"$projects`""
            if ($arguments) { $testCommand += " $arguments" }
            Write-Host "Executing: $testCommand"
            Invoke-Expression $testCommand
          }
          "pack" {
            $packCommand = "dotnet pack `"$projects`""
            if ($arguments) { $packCommand += " $arguments" }
            Write-Host "Executing: $packCommand"
            Invoke-Expression $packCommand
          }
          "publish" {
            $publishCommand = "dotnet publish `"$projects`""
            if ($arguments) { $publishCommand += " $arguments" }
            Write-Host "Executing: $publishCommand"
            Invoke-Expression $publishCommand
          }
          default {
            throw "Invalid command: $command"
          }
        }
