name: Reusable Dotnet Workflow

inputs:
  command:
    required: true
    type: string
  projects:
    required: true
    type: string
  arguments:
    required: false
    type: string
  restoreArguments:
    required: false
    type: string
  publishTestResults:
    required: false
    type: boolean
  testRunTitle:
    required: false
    type: string
  publishWebProjects:
    required: false
    type: boolean
  zipAfterPublish:
    required: false
    type: boolean
  modifyOutputPath:
    required: false
    type: boolean
  configuration:
    required: false
    type: string
  packDirectory:
    required: false
    type: string
  nobuild:
    required: false
    type: boolean
  includesymbols:
    required: false
    type: boolean
  includesource:
    required: false
    type: boolean
  nugetConfigPath:
    required: false
    type: string
  noCache:
    required: false
    type: boolean
  restoreDirectory:
    required: false
    type: string
  verbosityRestore:
    required: false
    type: string
  buildProperties:
    required: false
    type: string
  verbosityPack:
    required: false
    type: string

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.201'

    - name: Run dotnet command
      shell: pwsh
      run: |
        $command = '${{ inputs.command }}'
        $projects = '${{ inputs.projects }}'
        $arguments = '${{ inputs.arguments }}'

        # Validate the 'projects' input
        if (-not $projects -or $projects.Trim() -eq '') {
          throw "The 'projects' input is required and cannot be empty."
        }

        # Handle different commands
        switch ($command) {
          "restore" {
            $restoreCommand = "dotnet restore `"$projects`""
            if ('${{ inputs.nugetConfigPath }}') { $restoreCommand += " --configfile `"$(${inputs.nugetConfigPath})`"" }
            if ('${{ inputs.restoreArguments }}') { $restoreCommand += " $(${inputs.restoreArguments})" }
            if ('${{ inputs.noCache }}' -eq 'true') { $restoreCommand += " --no-cache" }
            if ('${{ inputs.restoreDirectory }}') { $restoreCommand += " --packages `"$(${inputs.restoreDirectory})`"" }
            if ('${{ inputs.verbosityRestore }}' -and '${{ inputs.verbosityRestore }}'.Trim() -ne '') {
              $restoreCommand += " --verbosity `"$(${inputs.verbosityRestore})`""
            }
            Write-Host "Executing: $restoreCommand"
            Invoke-Expression $restoreCommand
          }
          "build" {
            $buildCommand = "dotnet build `"$projects`""
            if ($arguments) { $buildCommand += " $arguments" }
            Write-Host "Executing: $buildCommand"
            Invoke-Expression $buildCommand
          }
          "test" {
            $testCommand = "dotnet test `"$projects`""
            if ($arguments) { $testCommand += " $arguments" }
            if ('${{ inputs.testRunTitle }}') { $testCommand += " --logger `"'trx;LogFileName=${{ inputs.testRunTitle }}.trx'`"" }
            Write-Host "Executing: $testCommand"
            Invoke-Expression $testCommand
            if ('${{ inputs.publishTestResults }}' -eq 'true') {
              Write-Host "Publishing test results..."
            }
          }
          "pack" {
            $packCommand = "dotnet pack `"$projects`""
            if ('${{ inputs.configuration }}') { $packCommand += " --configuration `"$(${inputs.configuration})`"" }
            if ('${{ inputs.packDirectory }}') { $packCommand += " --output `"$(${inputs.packDirectory})`"" }
            if ('${{ inputs.nobuild }}' -eq 'true') { $packCommand += " --no-build" }
            if ('${{ inputs.includesymbols }}' -eq 'true') { $packCommand += " --include-symbols" }
            if ('${{ inputs.includesource }}' -eq 'true') { $packCommand += " --include-source" }
            if ('${{ inputs.buildProperties }}') { $packCommand += " --property `"$(${inputs.buildProperties})`"" }
            if ('${{ inputs.verbosityPack }}') { $packCommand += " --verbosity `"$(${inputs.verbosityPack})`"" }
            Write-Host "Executing: $packCommand"
            Invoke-Expression $packCommand
          }
          "publish" {
            $publishCommand = "dotnet publish `"$projects`""
            if ('${{ inputs.configuration }}') { $publishCommand += " --configuration `"$(${inputs.configuration})`"" }
            if ('${{ inputs.packDirectory }}') { $publishCommand += " --output `"$(${inputs.packDirectory})`"" }
            if ('${{ inputs.nobuild }}' -eq 'true') { $publishCommand += " --no-build" }
            if ('${{ inputs.verbosityPack }}') { $publishCommand += " --verbosity `"$(${inputs.verbosityPack})`"" }
            Write-Host "Executing: $publishCommand"
            Invoke-Expression $publishCommand
            if ('${{ inputs.publishWebProjects }}' -eq 'true') {
              Write-Host "Publishing web projects..."
            }
            if ('${{ inputs.zipAfterPublish }}' -eq 'true') {
              Write-Host "Zipping published output..."
            }
          }
          default {
            throw "Invalid command: $command"
          }
        }
