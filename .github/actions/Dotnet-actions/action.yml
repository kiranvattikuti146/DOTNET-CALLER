name: Reusable Dotnet Workflow

inputs:
  command:
    required: true
    type: string
  projects:
    required: true
    type: string
  arguments:
    required: false
    type: string
  restoreArguments:
    required: false
    type: string
  nugetConfigPath:
    required: true
    type: string
  noCache:
    required: false
    type: boolean
  packagesDirectory:
    required: true
    type: string

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.201'

    - name: Validate nuget.config Path
        run: |
          if (!(Test-Path "${{ inputs.nugetConfigPath }}")) {
            Write-Error "nuget.config file not found at path: ${{ inputs.nugetConfigPath }}"
            exit 1
          }

      - name: Download NuGet
        run: |
          if (!(Test-Path "${{ inputs.nuGetPath }}")) {
            Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/v${{ inputs.nuGetVersion }}/nuget.exe" -OutFile "${{ inputs.nuGetPath }}"
          }

      - name: Restore NuGet Packages
        run: |
          ./nuget.exe restore "${{ inputs.solution }}" `
            -ConfigFile "${{ inputs.nugetConfigPath }}" `
            -PackagesDirectory "${{ inputs.packagesDirectory }}" `
            -Verbosity ${{ inputs.verbosity }} `
            -NonInteractive `
            ${{ inputs.nuGetRestoreArgs }}
            
          "build" {
            $buildCommand = "dotnet build `"$projects`""
            if ($arguments) { $buildCommand += " $arguments" }
            Write-Host "Executing: $buildCommand"
            Invoke-Expression $buildCommand
          }
          "test" {
            $testCommand = "dotnet test `"$projects`""
            if ($arguments) { $testCommand += " $arguments" }
            Write-Host "Executing: $testCommand"
            Invoke-Expression $testCommand
          }
          "pack" {
            $packCommand = "dotnet pack `"$projects`""
            if ($arguments) { $packCommand += " $arguments" }
            Write-Host "Executing: $packCommand"
            Invoke-Expression $packCommand
          }
          "publish" {
            $publishCommand = "dotnet publish `"$projects`""
            if ($arguments) { $publishCommand += " $arguments" }
            Write-Host "Executing: $publishCommand"
            Invoke-Expression $publishCommand
          }
          default {
            throw "Invalid command: $command"
          }
        }
