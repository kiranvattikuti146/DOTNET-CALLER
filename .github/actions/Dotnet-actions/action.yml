name: Reusable Dotnet Workflow

inputs:
  command:
    required: true
    type: string
  projects:
    required: true
    type: string
  arguments:
    required: false
    type: string
  restoreArguments:
    required: false
    type: string
  publishTestResults:
    required: false
    type: boolean
  testRunTitle:
    required: false
    type: string
  publishWebProjects:
    required: false
    type: boolean
  zipAfterPublish:
    required: false
    type: boolean
  modifyOutputPath:
    required: false
    type: boolean
  packagesToPack:
    required: false
    type: string
  configuration:
    required: false
    type: string
  packDirectory:
    required: false
    type: string
  nobuild:
    required: false
    type: boolean
  includesymbols:
    required: false
    type: boolean
  includesource:
    required: false
    type: boolean
  requestTimeout:
    required: false
    type: string
  includeNuGetOrg:
    required: false
    type: boolean
  nugetConfigPath:
    required: false
    type: string
  noCache:
    required: false
    type: boolean
  restoreDirectory:
    required: false
    type: string
  verbosityRestore:
    required: false
    type: string
  publishPackageMetadata:
    required: false
    type: boolean
  buildProperties:
    required: false
    type: string
  verbosityPack:
    required: false
    type: string

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.201'

    - name: Run dotnet command
      shell: pwsh
      run: |
        $command = '${{ inputs.command }}'
        $projects = '${{ inputs.projects }}'
        $arguments = '${{ inputs.arguments }}'

        switch ($command) {
          "restore" {
            $restoreArgs = @()
            if ('${{ inputs.nugetConfigPath }}') { $restoreArgs += "--configfile '${{ inputs.nugetConfigPath }}'" }
            if ('${{ inputs.restoreArguments }}') { $restoreArgs += '${{ inputs.restoreArguments }}' }
            if ('${{ inputs.noCache }}' -eq 'true') { $restoreArgs += "--no-cache" }
            if ('${{ inputs.restoreDirectory }}') { $restoreArgs += "--packages '${{ inputs.restoreDirectory }}'" }
            if ('${{ inputs.verbosityRestore }}') { $restoreArgs += "--verbosity ${inputs.verbosityRestore}" }
            dotnet restore "$projects" $restoreArgs -p:RestoreForce=true
          }
          "build" {
            dotnet build "$projects" $arguments
          }
          "test" {
            dotnet test "$projects" $arguments `
              --logger "trx;LogFileName=${{ inputs.testRunTitle }}.trx"
            if ('${{ inputs.publishTestResults }}' -eq 'true') {
              echo "Publishing test results..."
            }
          }
          "pack" {
            $packArgs = @()
            if ('${{ inputs.configuration }}') { $packArgs += "--configuration '${{ inputs.configuration }}'" }
            if ('${{ inputs.packDirectory }}') { $packArgs += "--output '${{ inputs.packDirectory }}'" }
            if ('${{ inputs.nobuild }}' -eq 'true') { $packArgs += "--no-build" }
            if ('${{ inputs.includesymbols }}' -eq 'true') { $packArgs += "--include-symbols" }
            if ('${{ inputs.includesource }}' -eq 'true') { $packArgs += "--include-source" }
            if ('${{ inputs.buildProperties }}') { $packArgs += "--property '${{ inputs.buildProperties }}'" }
            if ('${{ inputs.verbosityPack }}') { $packArgs += "--verbosity '${{ inputs.verbosityPack }}'" }
            dotnet pack "$projects" $packArgs
          }
          "publish" {
            $publishArgs = @()
            if ('${{ inputs.configuration }}') { $publishArgs += "--configuration '${{ inputs.configuration }}'" }
            if ('${{ inputs.packDirectory }}') { $publishArgs += "--output '${{ inputs.packDirectory }}'" }
            if ('${{ inputs.nobuild }}' -eq 'true') { $publishArgs += "--no-build" }
            if ('${{ inputs.verbosityPack }}') { $publishArgs += "--verbosity '${{ inputs.verbosityPack }}'" }
            dotnet publish "$projects" $publishArgs
            if ('${{ inputs.publishWebProjects }}' -eq 'true') {
              echo "Publishing web projects..."
            }
            if ('${{ inputs.zipAfterPublish }}' -eq 'true') {
              echo "Zipping published output..."
            }
          }
          default {
            throw "Invalid command: $command"
          }
        }
